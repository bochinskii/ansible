-----------------------------------------------------------------------
Перенаправление выполнения заданий на определенный сервер - delegate_to
-----------------------------------------------------------------------

https://docs.ansible.com/ansible/latest/user_guide/playbooks_delegation.html

В названии главы все написано. Функция - delegate_to позволяет перенаправить
выполнение заданий на один какой-нибудь выделенный сервер.

Это нужно в редких случаях, но расспространенных. В официальной документации
приведен пример с unregister web сервера из NLB пула. Например вы хотите
переустановить php на другую версию. Вам нужно поочередно выводить из NLB пула
сервера, устанавливать php и заводить обратно сервера в пул.
Эту задачу возлагают на один из серверов в пуле.




Мы же рассмотрим данный параметр на другом примере. Вот нам нужно - перезагрузить сервера.

$ cd ./008_009_Reboot_delegate_to_error_handling

В директории с проектом все необходимые файлы.

Рассмотрим файл - playbook_reboot.yml. Он перезагружает сервера.

Если мы выполним данный playbook без второго задания (Wait for our servers),
то наши сервера перезагрузятся штатно, но ansible потеряет соединение с ними и выдаст ошибку.

Чтобы этого не было мы добавили второе задание и делегировали данное задание самим себе (127.0.0.1).
Таким образом компьютер с которого мы запускаем данный playbook будет делать health checks на
ip которые описаны в переменной - ansible_host на порт в переменной - ansible_port
(т.е. ssh порт). Если в течении 120 секунд health checks не сможет достучаться до порта,
то ansible выведет ошибку о том, что сервер не доступен.



Выполним:

$ ansible-playbook -i ./hosts playbook_reboot.yml -e "selected=myservers"

PLAY [Reboot] ******************************************************************************************************************************************************************

TASK [Gathering Facts] *********************************************************************************************************************************************************
ok: [debian]
ok: [ubuntu]
ok: [rocky]

TASK [Reboot our servers] ******************************************************************************************************************************************************
changed: [ubuntu]
changed: [debian]
changed: [rocky]

TASK [Wait for our servers] ****************************************************************************************************************************************************
ok: [debian -> 127.0.0.1]
ok: [rocky -> 127.0.0.1]
ok: [ubuntu -> 127.0.0.1]

PLAY RECAP *********************************************************************************************************************************************************************
debian                     : ok=3    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
rocky                      : ok=3    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
ubuntu                     : ok=3    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0

Все работает. Сервера перезагрузились и при этом ошибки не было.

Тут еслы вы заметили мы решили воспользоваться extra_vars.

Так же видно, что задания адресованные каждому серверу были перенаправлены
этими серверами нам самим (debian -> 127.0.0.1 и т.д.).

-----------------------------------------------------------------------------------
Дополнение:

Так же есть полезный параметр - run_once (посмотрите в ссылке на документацию),
он говорит о том, что нужно выполнить задание только один раз.

Это полезно, если вам нужно что-то сделать не важно на каком сервере.
Например у вас есть кластер docker swarm в котором все ноды - это менеджеры.
Нужно что-то сделато в любом сервере из кластера.

Часто используют параметры run_once и delegate_to вместе.
Это нужно для того, чтобы задание выполнилось один раз и на определенном сервере.

--------------------------------------------------------------------------------

------------------------------------------------------------------------------------
Дополнение:

Так же можно ждать запуска сервиса. Например перезагружаем сервер и ждем когда подниметься
apache.

Вот похожий пример - playbook_reboot_v2.yml

$ ansible-playbook -i ./hosts playbook_reboot_v2.yml -e "selected=ubuntu, web_port=8081"

$ ansible-playbook -i ./hosts playbook_reboot_v2.yml -e "selected=debian, web_port=8082"

$ ansible-playbook -i ./hosts playbook_reboot_v2.yml -e "selected=rocky, web_port=8083"

-----------------------------------------------------------------------------------
