-------------------------------------------
Перехват и контроль ошибок (Error handling)
--------------------------------------------

https://docs.ansible.com/ansible/latest/user_guide/playbooks_error_handling.html

Мы ранее немного затрагивали тему того, как работаеют задания (tasks).
Если задание завершилось с ошибкой для каких то серверов, то для этих серверов
остальные задания не выполняются.

Есть ситуации, когда это поведение по-умолчанию хочется изменить.

Рассмотрим пример - playbook_errorhandling.yml.

Тут мы заведомо делаем ошибку в 1-ом задании (при установки tree).
Далее должно выполнится еще 2-а задания, которые записывают в переменную kernel_ver
вывод команды - "uname -r | cut -c 1-6" и выводят на экран.

Запустим, например, для debian подобных серверов

$ ansible-playbook -i ./hosts playbook_errorhandling.yml

PLAY [Error Handling] **********************************************************************************************************************************************************

TASK [Gathering Facts] *********************************************************************************************************************************************************
ok: [debian]
ok: [ubuntu]

TASK [Install tree] ************************************************************************************************************************************************************
fatal: [debian]: FAILED! => {"changed": false, "msg": "No package matching 'treee' is available"}
fatal: [ubuntu]: FAILED! => {"changed": false, "msg": "No package matching 'treee' is available"}

PLAY RECAP *********************************************************************************************************************************************************************
debian                     : ok=1    changed=0    unreachable=0    failed=1    skipped=0    rescued=0    ignored=0
ubuntu                     : ok=1    changed=0    unreachable=0    failed=1    skipped=0    rescued=0    ignored=0




Как мы видим 1-е задание не выполнилось, а значит и остальные задания не ваыполнятся.

Изменим такое поведение. Например нам не важно установится tree или нет.
Поэтому даже при ошибке мы должны продолжать выполнять задания в playbook.
Нам нужно добавить к заданию - ignore_errors (в нашем случае раскомментировать).

Выполняем еще раз

$ ansible-playbook -i ./hosts playbook_errorhandling.yml

PLAY [Error Handling] **********************************************************************************************************************************************************

TASK [Gathering Facts] *********************************************************************************************************************************************************
ok: [debian]
ok: [ubuntu]

TASK [Install tree] ************************************************************************************************************************************************************
fatal: [debian]: FAILED! => {"changed": false, "msg": "No package matching 'treee' is available"}
...ignoring
fatal: [ubuntu]: FAILED! => {"changed": false, "msg": "No package matching 'treee' is available"}
...ignoring

TASK [Kernell version] *********************************************************************************************************************************************************
changed: [debian]
changed: [ubuntu]

TASK [Show kernel version] *****************************************************************************************************************************************************
ok: [ubuntu] => {
    "kernel_ver.stdout": "5.15.0"
}
ok: [debian] => {
    "kernel_ver.stdout": "5.10.0"
}

PLAY RECAP *********************************************************************************************************************************************************************
debian                     : ok=4    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=1
ubuntu                     : ok=4    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=1


И мы видим, что несмотря на то, что первое задание выдает ошибку, остальные задания выполняются.





Теперь, допустим нам нужно что-то сделать (в нашем случае вывести версию ядра),
если версия ядра более 5.10.

Для этого можно сделать так, чтобы playbook выдавал ошибку, если у сервера ядро
версии ниже или равно 5.10 и не выполнял остальные tasks'ы. Для этого нужно
использовать параметр - failed_when.

Будем использовать файл - playbook_errorhandling_failed_when.yml


$ ansible-playbook -i ./hosts playbook_errorhandling_failed_when.yml

PLAY [Error Handling] **********************************************************************************************************************************************************

TASK [Gathering Facts] *********************************************************************************************************************************************************
ok: [debian]
ok: [ubuntu]

TASK [Install tree] ************************************************************************************************************************************************************
fatal: [debian]: FAILED! => {"changed": false, "msg": "No package matching 'treee' is available"}
...ignoring
fatal: [ubuntu]: FAILED! => {"changed": false, "msg": "No package matching 'treee' is available"}
...ignoring

TASK [Kernell version] *********************************************************************************************************************************************************
changed: [debian]
changed: [ubuntu]

TASK [Kernell minor version] ***************************************************************************************************************************************************
fatal: [debian]: FAILED! => {"changed": true, "cmd": "uname -r | cut -c 3-4", "delta": "0:00:00.005908", "end": "2022-06-09 09:44:46.337940", "failed_when_result": true, "msg": "", "rc": 0, "start": "2022-06-09 09:44:46.332032", "stderr": "", "stderr_lines": [], "stdout": "10", "stdout_lines": ["10"]}
changed: [ubuntu]

TASK [Show kernel version] *****************************************************************************************************************************************************
ok: [ubuntu] => {
    "kernel_ver.stdout": "5.15.0"
}

PLAY RECAP *********************************************************************************************************************************************************************
debian                     : ok=3    changed=1    unreachable=0    failed=1    skipped=0    rescued=0    ignored=1
ubuntu                     : ok=5    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=1


Как мы видим, у debian версия ядра меньше или равно 5.10, поэтому на данном сервере выйшла ошибка
и следущее задание не выполнилось (Show kernel version).
Ну, а ubuntu имеет версию ядра более чем 5.10, поэтому для данного сервера
задание - "Show kernel version" выполнилось.


--------------------------------------------------------------------------------------
Заметка:

В файле - playbook_errorhandling_failed_when.yml, вот такой строчкой

kernel_minor_ver.stdout | int <= 10

мы преобразовалаи переменную kernel_minor_ver.stdout из строки в цифру, а далее уже
идет условие

--------------------------------------------------------------------------------------






Теперь последний момент.

Допустим нам нужно чтобы если возникает ошибка при выполнении задания на одном из
серверов, то остальные задания так-же не выполнялись и на остальных серверах
(если там не указано - ignore_errors).

Это делается с помощью параметра - any_errors_fatal.

Мы будем использовать файл - playbook_errorhandling_any_errors_fatal.yml в
который мы, просто, дабавили данный парамерт.

$ ansible-playbook -i ./hosts playbook_errorhandling_any_errors_fatal.yml

PLAY [Error Handling] **********************************************************************************************************************************************************

TASK [Gathering Facts] *********************************************************************************************************************************************************
ok: [debian]
ok: [ubuntu]

TASK [Install tree] ************************************************************************************************************************************************************
fatal: [debian]: FAILED! => {"changed": false, "msg": "No package matching 'treee' is available"}
...ignoring
fatal: [ubuntu]: FAILED! => {"changed": false, "msg": "No package matching 'treee' is available"}
...ignoring

TASK [Kernell version] *********************************************************************************************************************************************************
changed: [debian]
changed: [ubuntu]

TASK [Kernell minor version] ***************************************************************************************************************************************************
fatal: [debian]: FAILED! => {"changed": true, "cmd": "uname -r | cut -c 3-4", "delta": "0:00:00.005570", "end": "2022-06-09 09:57:17.224925", "failed_when_result": true, "msg": "", "rc": 0, "start": "2022-06-09 09:57:17.219355", "stderr": "", "stderr_lines": [], "stdout": "10", "stdout_lines": ["10"]}
changed: [ubuntu]

NO MORE HOSTS LEFT *************************************************************************************************************************************************************

PLAY RECAP *********************************************************************************************************************************************************************
debian                     : ok=3    changed=1    unreachable=0    failed=1    skipped=0    rescued=0    ignored=1
ubuntu                     : ok=4    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=1

Как мы видим, третье задание не выполнилось ни на каком сервере после ошибки.
