----------------------------------------------
Переменные Debug, Set_fact, Register
----------------------------------------------

Модуль Debug используется для того, чтобы во время выполнения playbook на экран выводились переменные, которые вам интересны.

Мы написали простеньких playbook - playbook_debug.yml

С ним можно ознакомится в директории с проектом

Запустим

$ ansible-playbook -i ./hosts playbook_debug.yml

PLAY [Work with debug] *********************************************************************************************************************************************************

TASK [Gathering Facts] *********************************************************************************************************************************************************
ok: [rocky]
ok: [ubuntu]
ok: [debian]

TASK [My OS family] ************************************************************************************************************************************************************
ok: [ubuntu] => {
    "msg": "This is my family - \"Debian\""
}
ok: [debian] => {
    "msg": "This is my family - \"Debian\""
}
ok: [rocky] => {
    "msg": "This is my family - \"RedHat\""
}

TASK [Define variable] *********************************************************************************************************************************************************
ok: [ubuntu]
ok: [debian]
ok: [rocky]

TASK [Show new variable] *******************************************************************************************************************************************************
ok: [ubuntu] => {
    "new_var": "This is my family - \"Debian\" and my ip address - \"10.0.2.15\""
}
ok: [debian] => {
    "new_var": "This is my family - \"Debian\" and my ip address - \"10.0.2.15\""
}
ok: [rocky] => {
    "new_var": "This is my family - \"RedHat\" and my ip address - \"10.0.2.15\""
}

TASK [Set uptime in variable] **************************************************************************************************************************************************
changed: [debian]
changed: [rocky]
changed: [ubuntu]

TASK [Show uptime] *************************************************************************************************************************************************************
ok: [ubuntu] => {
    "my_uptime": {
        "changed": true,
        "cmd": "uptime",
        "delta": "0:00:00.007900",
        "end": "2022-06-07 08:32:32.415440",
        "failed": false,
        "msg": "",
        "rc": 0,
        "start": "2022-06-07 08:32:32.407540",
        "stderr": "",
        "stderr_lines": [],
        "stdout": " 08:32:32 up 25 min,  2 users,  load average: 0.04, 0.03, 0.05",
        "stdout_lines": [
            " 08:32:32 up 25 min,  2 users,  load average: 0.04, 0.03, 0.05"
        ]
    }
}
ok: [debian] => {
    "my_uptime": {
        "changed": true,
        "cmd": "uptime",
        "delta": "0:00:00.009573",
        "end": "2022-06-07 08:32:32.439093",
        "failed": false,
        "msg": "",
        "rc": 0,
        "start": "2022-06-07 08:32:32.429520",
        "stderr": "",
        "stderr_lines": [],
        "stdout": " 08:32:32 up 24 min,  1 user,  load average: 0.10, 0.07, 0.01",
        "stdout_lines": [
            " 08:32:32 up 24 min,  1 user,  load average: 0.10, 0.07, 0.01"
        ]
    }
}
ok: [rocky] => {
    "my_uptime": {
        "changed": true,
        "cmd": "uptime",
        "delta": "0:00:00.010480",
        "end": "2022-06-07 08:32:32.449036",
        "failed": false,
        "msg": "",
        "rc": 0,
        "start": "2022-06-07 08:32:32.438556",
        "stderr": "",
        "stderr_lines": [],
        "stdout": " 08:32:32 up 23 min,  1 user,  load average: 0.05, 0.01, 0.00",
        "stdout_lines": [
            " 08:32:32 up 23 min,  1 user,  load average: 0.05, 0.01, 0.00"
        ]
    }
}

TASK [Show uptime] *************************************************************************************************************************************************************
ok: [ubuntu] => {
    "my_uptime.stdout": " 08:32:32 up 25 min,  2 users,  load average: 0.04, 0.03, 0.05"
}
ok: [debian] => {
    "my_uptime.stdout": " 08:32:32 up 24 min,  1 user,  load average: 0.10, 0.07, 0.01"
}
ok: [rocky] => {
    "my_uptime.stdout": " 08:32:32 up 23 min,  1 user,  load average: 0.05, 0.01, 0.00"
}

PLAY RECAP *********************************************************************************************************************************************************************
debian                     : ok=7    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
rocky                      : ok=7    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
ubuntu                     : ok=7    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0



Сперва, с помощью debug мы вывесли сообщение (msg) в котором использовали
переменную - ansible_os_family

...

TASK [My OS family] ************************************************************************************************************************************************************
ok: [ubuntu] => {
    "msg": "This is my family - \"Debian\""
}
ok: [debian] => {
    "msg": "This is my family - \"Debian\""
}
ok: [rocky] => {
    "msg": "This is my family - \"RedHat\""
}

...

---------------------------------------------------------------------------------------
Заметка:


К слову, переменную ansible_os_family можно посмотреть (как и другие полезные переменные)
при выполнении модуля setup.

Забегая вперед скажем, что мы этот модуль будем часто использовать что даст нам возможность
выполнять или не выполнять некоторые действия в playbook в зависимости от значения переменных.
-------------------------------------------------------------------------------------

Если вам понадобится создать переменную по ходу playbook, то используется модуль - set_fact

Тут мы с помощью set_fact создали новую переменную и вывели ее с помощью модуля debug.

К слову, переменную ansible_default_ipv4.address мы тоже узнали выполнив модуль setup.

...

TASK [Show new variable] *******************************************************************************************************************************************************
ok: [ubuntu] => {
    "new_var": "This is my family - \"Debian\" and my ip address - \"10.0.2.15\""
}
ok: [debian] => {
    "new_var": "This is my family - \"Debian\" and my ip address - \"10.0.2.15\""
}
ok: [rocky] => {
    "new_var": "This is my family - \"RedHat\" and my ip address - \"10.0.2.15\""
}

...



Во время построения playbook иногда нужно будет использовать модуль shell.
Есть некоторая проблема этого модуля. Она заключается в том, что не проиходит вывода
информации при выполнении команды. Поэтому, чтобы данный вывод увидеть, можно его
записать в переменную и вывести ее потом.

В данном случае мы выполняем команду uptime и записываем ее в переменную my_uptime.
Далее, выводим ее с помощью щнакомого нам модуля debug.

...

TASK [Set uptime in variable] **************************************************************************************************************************************************
changed: [debian]
changed: [rocky]
changed: [ubuntu]

TASK [Show uptime] *************************************************************************************************************************************************************
ok: [ubuntu] => {
    "my_uptime": {
        "changed": true,
        "cmd": "uptime",
        "delta": "0:00:00.007900",
        "end": "2022-06-07 08:32:32.415440",
        "failed": false,
        "msg": "",
        "rc": 0,
        "start": "2022-06-07 08:32:32.407540",
        "stderr": "",
        "stderr_lines": [],
        "stdout": " 08:32:32 up 25 min,  2 users,  load average: 0.04, 0.03, 0.05",
        "stdout_lines": [
            " 08:32:32 up 25 min,  2 users,  load average: 0.04, 0.03, 0.05"
        ]
    }
}
ok: [debian] => {
    "my_uptime": {
        "changed": true,
        "cmd": "uptime",
        "delta": "0:00:00.009573",
        "end": "2022-06-07 08:32:32.439093",
        "failed": false,
        "msg": "",
        "rc": 0,
        "start": "2022-06-07 08:32:32.429520",
        "stderr": "",
        "stderr_lines": [],
        "stdout": " 08:32:32 up 24 min,  1 user,  load average: 0.10, 0.07, 0.01",
        "stdout_lines": [
            " 08:32:32 up 24 min,  1 user,  load average: 0.10, 0.07, 0.01"
        ]
    }
}
ok: [rocky] => {
    "my_uptime": {
        "changed": true,
        "cmd": "uptime",
        "delta": "0:00:00.010480",
        "end": "2022-06-07 08:32:32.449036",
        "failed": false,
        "msg": "",
        "rc": 0,
        "start": "2022-06-07 08:32:32.438556",
        "stderr": "",
        "stderr_lines": [],
        "stdout": " 08:32:32 up 23 min,  1 user,  load average: 0.05, 0.01, 0.00",
        "stdout_lines": [
            " 08:32:32 up 23 min,  1 user,  load average: 0.05, 0.01, 0.00"
        ]
    }
}

...

Кстати, мы уже должны были заметить, что иногда пишем переменные через точку.
Напомню, ansible_default_ipv4.address.

Дело в том, что у нас бывают переменные, а бывает массив. Так вот, чтобы обратится
не к целому масиву, а к его элементу, мы используем подобную конструкцию.

В нашем playbook мы сделали наглядный пример с uptime. Вывод от выполненой команды
записался в массив. И мы может вытащить только часть.

Например нас не сильно интересует весь массив, а только один элемент - stdout.

...

TASK [Show uptime] *************************************************************************************************************************************************************
ok: [ubuntu] => {
    "my_uptime.stdout": " 08:32:32 up 25 min,  2 users,  load average: 0.04, 0.03, 0.05"
}
ok: [debian] => {
    "my_uptime.stdout": " 08:32:32 up 24 min,  1 user,  load average: 0.10, 0.07, 0.01"
}
ok: [rocky] => {
    "my_uptime.stdout": " 08:32:32 up 23 min,  1 user,  load average: 0.05, 0.01, 0.00"
}

...

Вот теперь мы получили не весь массив, а только одну необходимую строчку - stdout.
