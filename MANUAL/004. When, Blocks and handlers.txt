------------------------------------------------------
Блоки (block), условия (when) и обработчики (handlers)
------------------------------------------------------

Чтобы понять зачем нам блоки и условия. Нужно вернуться к ошибке, которая появлялись
ранее на сервере rocky.

Как мы помним apache сервер установился на ubuntu и debian серверах, но не установился
на rocky.  Это логично т.к. никакого apt на rocky нет. Мы знаем, что он
используется dnf.

Инициализируйте инфраструктуру заново

$ vagrant destroy

$ vagrant up

или удалите то что мы сделали в прошлые разы с помощью ansible

$ ansible -i ./hosts myservers -m apt -a "pkg=apache2 state=absent autoremove=yes" -b

$ ansible -i ./hosts myservers -m file -a "path=/var/www state=absent" -b


Что же нужно сделать для того, чтобы наш playbook заработал для всех типов серверов (Debian, RedHat).

Можно конечно написать два разных playbook и занести одни серверы в одну группу,
а другие в другую (в inventory файле). Но это не "наш" метод. Мы будем использовать
одну шруппу серверов - myservers и будем использовать один - playbook в котором
будем пользоваться blocks'ами и условиями - when.

--------------
Условие - when
--------------

Сначало, разберем условие (when). Это довольно таки просто. Выполнить task, если
оно попадает под определенное условие (when).

Будем использовать файл - playbook_apache_when.yml. С ним можно ознакомиться в
диреткории с проектом.

$ ansible-playbook -i ./hosts playbook_apache_when.yml

PLAY [Installing Apache web server and upload our index.html] ******************************************************************************************************************

TASK [Gathering Facts] *********************************************************************************************************************************************************
ok: [debian]
ok: [ubuntu]
ok: [rocky]

TASK [Check os family] *********************************************************************************************************************************************************
ok: [ubuntu] => {
    "ansible_os_family": "Debian"
}
ok: [debian] => {
    "ansible_os_family": "Debian"
}
ok: [rocky] => {
    "ansible_os_family": "RedHat"
}

TASK [Install for RedHat] ******************************************************************************************************************************************************
skipping: [ubuntu]
skipping: [debian]
changed: [rocky]

TASK [Start apache servers for RedHat] *****************************************************************************************************************************************
skipping: [ubuntu]
skipping: [debian]
changed: [rocky]

TASK [Install for Debian] ******************************************************************************************************************************************************
skipping: [rocky]
changed: [debian]
changed: [ubuntu]

TASK [Start apache for Denbian] ************************************************************************************************************************************************
skipping: [rocky]
ok: [debian]
ok: [ubuntu]

TASK [Copy our index.html file for CentOS] *************************************************************************************************************************************
changed: [debian]
changed: [ubuntu]
changed: [rocky]

PLAY RECAP *********************************************************************************************************************************************************************
debian                     : ok=5    changed=2    unreachable=0    failed=0    skipped=2    rescued=0    ignored=0
rocky                      : ok=5    changed=3    unreachable=0    failed=0    skipped=2    rescued=0    ignored=0
ubuntu                     : ok=5    changed=2    unreachable=0    failed=0    skipped=2    rescued=0    ignored=0

Как мы видим все отработало без ошибок.
Можно зайти на страницы web серверов и проверить.



Из playbook можно заметить, что мы много раз использовали when. А если бы у нас были бы сервера SUSA.
Было бы еще больше условий. А если бы мы ставили еще больше пакетов.
Чтобы это как-то сократить можно использовать блоки (block).



-------------------------------
Блоки - blocks и условия - when
-------------------------------

В блоки (block) можно занести те настройки, которые нас интересуют и для этого
блока сделать условие (when).

Будем использовать файл - playbook_apache_blocks.yml. С пим можно ознакомится
в директории с проектом.

$ ansible-playbook -i ./hosts playbook_apache_blocks.yml

PLAY [Installing Apache web server and upload our index.html] ******************************************************************************************************************

TASK [Gathering Facts] *********************************************************************************************************************************************************
ok: [debian]
ok: [rocky]
ok: [ubuntu]

TASK [Check os family] *********************************************************************************************************************************************************
ok: [ubuntu] => {
    "ansible_os_family": "Debian"
}
ok: [debian] => {
    "ansible_os_family": "Debian"
}
ok: [rocky] => {
    "ansible_os_family": "RedHat"
}

TASK [Install for apache for RadHat] *******************************************************************************************************************************************
skipping: [ubuntu]
skipping: [debian]
changed: [rocky]

TASK [Start apache for RadHat] *************************************************************************************************************************************************
skipping: [ubuntu]
skipping: [debian]
changed: [rocky]

TASK [Firewalld start for RedHat] **********************************************************************************************************************************************
skipping: [ubuntu]
skipping: [debian]
changed: [rocky]

TASK [Open http service for RedHat] ********************************************************************************************************************************************
skipping: [ubuntu]
skipping: [debian]
changed: [rocky]

TASK [Install for Debian] ******************************************************************************************************************************************************
skipping: [rocky]
changed: [debian]
changed: [ubuntu]

TASK [Start apache for Denbian] ************************************************************************************************************************************************
skipping: [rocky]
ok: [ubuntu]
ok: [debian]

TASK [Copy our index.html file] ************************************************************************************************************************************************
changed: [debian]
changed: [ubuntu]
changed: [rocky]

RUNNING HANDLER [Firewalld reload] *********************************************************************************************************************************************
changed: [rocky]

PLAY RECAP *********************************************************************************************************************************************************************
debian                     : ok=5    changed=2    unreachable=0    failed=0    skipped=4    rescued=0    ignored=0
rocky                      : ok=8    changed=6    unreachable=0    failed=0    skipped=2    rescued=0    ignored=0
ubuntu                     : ok=5    changed=2    unreachable=0    failed=0    skipped=4    rescued=0    ignored=0


----------------------
Обработчики - handlers
----------------------


Вы могли заметить, что мы добавили настройку firewalld сервиса на RedHat и handlers (обработчик).
Обработчик нужен для того, чтобы он выполнялся после опрежделенного task'а.

Обращаемся к hendlers'ам мы по его имени с помощью опции notify в task'е.

Т.е. в нашем случае, мы создали обработчик с именем - "Firewalld reload".
В task'е - "Open http service for RedHat" с помощью notify мы обратитлись к
данному обработчику.

Это значит, что после того как выполнился task "Open http service for RedHat",
ansible будет знать, что нужно будет выполнить обработчик - "Firewalld reload"
т.е. перезапустить firewalld сервис.


-----------------------------------------------------------------------
Заметка:

Могло показаться, что мы можем, просто (без условий), соеденить в одном playbook настройки для
rocky и для ubuntu с debian, но это не так. Если вы помните, мы ранее говорили о том,
что ansible выполняет команды поочередно как они написаны в playbook.

Если на определенном задании (task ) произошла ошибка, то дальнейшые задания
выполняться не будут. если будет ошибка в одном task'е, то остальные выполняться не будут.

Вот поэтой причине мы будем использовать блоки и устовия.
----------------------------------------------------------------------
